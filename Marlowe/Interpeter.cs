using Marlowe.Utilities;
using System;
using System.Collections.Generic;



namespace Marlowe
{
    /// <summary>
    ///     The executation engine of <see cref="Marlowe"/>. Interprets the content
    ///     generated by the Symbol Table collection and attempts to execute the codes entrypoint.
    /// </summary>
    internal class Interpeter
    {
        private static List<SymbolTable> SymbolTables = new List<SymbolTable>();
        private static ILogger Logger;
        private readonly EntryPointCriteria Criteria;
        private SymbolTable EntryPoint;

        public Interpeter(List<SymbolTable> symbolTables)
        {
            Criteria = new EntryPointCriteria();
            SymbolTables = symbolTables;
        }
        public Interpeter(List<SymbolTable> symbolTables, ILogger logger)
        {
            Criteria = new EntryPointCriteria();
            SymbolTables = symbolTables;
            Logger = logger;
        }

        /// <summary>
        ///     Executes the Interpeter engines. discovers entrypoint into the provided code and
        ///     intepeters the context.
        /// </summary>
        public void Execute()
        {
            if (HasEntryPoint())
            {
                foreach(KeyValuePair<string, SymbolNode> directives in EntryPoint.Directives)
                {
                    SearchSymbolTable(directives.Key);

                }

            }
            else
            {
                if(Logger != null)
                {
                    Logger.WriteContent("No EntryPoint exists in this code.");
                }
            }

        }

        private void SearchSymbolTable(string key)
        {
            SymbolTable FilteredSymbolTable;
            foreach(SymbolTable symbolTable in SymbolTables)
            {
                foreach (KeyValuePair<string,SymbolNode> variable in symbolTable.Variables)
                {
                    if(variable.Value.Namespace == key || variable.Value.ClassName == key)
                    {
                        
                    }
                }
            }
        }

        public List<object> GenerateClassContext()
        {
            List<object> newClassObjects = new List<object>();
            foreach (SymbolTable symbolTable in SymbolTables)
            {
                object newType = (SymbolNodeToClassBuilder.CreateNewObject(symbolTable));
                newClassObjects.Add(newType);
                Console.WriteLine("Sucessfully created class \t" + newType.GetType() + " \nIt has the following properities:");
       
            }
            return newClassObjects;
        }
        private bool HasEntryPoint()
        {
            foreach (SymbolTable symbolTable in SymbolTables)
            {
                foreach (KeyValuePair<string, SymbolNode> functions in symbolTable.Functions)
                {
                    if (functions.Key.ToUpper().Equals("MAIN")) // Checks for main function in class
                    {
                        SymbolFunctionNode paramatars = (SymbolFunctionNode)functions.Value;
                        Criteria.SetMainFunctionExists(true);
                        foreach (KeyValuePair<string, SymbolNode> param in paramatars.Paramaters)
                        {
                            if (param.Key.ToUpper().Equals("ARGS") && param.Value.Type == typeof(string))   // Checks for string args array
                            {
                                Criteria.SetMainArgs(true);
                                break;
                            }
                            else
                            {
                                Criteria.SetMainFunctionExists(false);
                            }
                        }
                    }
                }
                if (Criteria.EntryPointFound())
                {
                    EntryPoint = symbolTable;
                    break;
                }
            }
            return Criteria.EntryPointFound();
        }
    }
}
